// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenHolidaysApi.DataLayer;

#nullable disable

namespace OpenHolidaysApi.DataLayer.Migrations
{
    [DbContext(typeof(OpenHolidaysApiDbContext))]
    partial class OpenHolidaysApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HolidayOUnit", b =>
                {
                    b.Property<Guid>("HolidaysId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OUnitsId")
                        .HasColumnType("uuid");

                    b.HasKey("HolidaysId", "OUnitsId");

                    b.HasIndex("OUnitsId");

                    b.ToTable("HolidayOUnit");
                });

            modelBuilder.Entity("HolidaySubdivision", b =>
                {
                    b.Property<Guid>("HolidaysId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubdivisionsId")
                        .HasColumnType("uuid");

                    b.HasKey("HolidaysId", "SubdivisionsId");

                    b.HasIndex("SubdivisionsId");

                    b.ToTable("HolidaySubdivision");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("ISO 3166-1 country code");

                    b.Property<ICollection<LocalizedText>>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Localized country names");

                    b.Property<ICollection<string>>("OfficialLanguages")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Official languages as ISO-639-1 codes");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("ISO 3166-1 full name");

                    b.Property<DateOnly>("TimeStamp")
                        .HasColumnType("date")
                        .HasColumnOrder(1)
                        .HasComment("Time stamp");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasComment("Representation of a country");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<ICollection<LocalizedText>>("Comments")
                        .HasColumnType("jsonb")
                        .HasComment("Additional localized comments");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to country");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasComment("End date of the holiday");

                    b.Property<ICollection<LocalizedText>>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Localized names of the holiday");

                    b.Property<bool>("Nationwide")
                        .HasColumnType("boolean")
                        .HasComment("Is this a nationwide holiday?");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasComment("Start date of the holiday");

                    b.Property<DateOnly>("TimeStamp")
                        .HasColumnType("date")
                        .HasColumnOrder(1)
                        .HasComment("Time stamp");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasComment("Type of holiday");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Holidays");

                    b.HasComment("Representation of a holiday");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("ISO-639-1 language code");

                    b.Property<ICollection<LocalizedText>>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Localized language names");

                    b.Property<DateOnly>("TimeStamp")
                        .HasColumnType("date")
                        .HasColumnOrder(1)
                        .HasComment("Time stamp");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.ToTable("Languages");

                    b.HasComment("Representation of a language");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.OUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Organizational unit code");

                    b.Property<ICollection<LocalizedText>>("Comments")
                        .HasColumnType("jsonb")
                        .HasComment("Additional localized comments");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to country");

                    b.Property<ICollection<LocalizedText>>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Localized organizational unit names");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to parent organizational unit");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Short name for display");

                    b.Property<DateOnly>("TimeStamp")
                        .HasColumnType("date")
                        .HasColumnOrder(1)
                        .HasComment("Time stamp");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("CountryId", "ShortName")
                        .IsUnique();

                    b.ToTable("OUnits");

                    b.HasComment("Representation of an organizational unit (e.g. a holiday zone or a school type)");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Subdivision", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasComment("Unique Id");

                    b.Property<ICollection<LocalizedText>>("Comments")
                        .HasColumnType("jsonb")
                        .HasComment("Additional localized comments");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasComment("Reference to country");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("IsoCode subdivision code");

                    b.Property<ICollection<LocalizedText>>("Names")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Localized subdivision names");

                    b.Property<ICollection<string>>("OfficialLanguages")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasComment("Official languages as ISO-639-1 codes");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Short name for display");

                    b.Property<DateOnly>("TimeStamp")
                        .HasColumnType("date")
                        .HasColumnOrder(1)
                        .HasComment("Time stamp");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("CountryId", "ShortName")
                        .IsUnique();

                    b.ToTable("Subdivisions");

                    b.HasComment("Representation of a subdivision (e.g. a federal state or a canton)");
                });

            modelBuilder.Entity("OUnitSubdivision", b =>
                {
                    b.Property<Guid>("OUnitsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubdivisionsId")
                        .HasColumnType("uuid");

                    b.HasKey("OUnitsId", "SubdivisionsId");

                    b.HasIndex("SubdivisionsId");

                    b.ToTable("OUnitSubdivision");
                });

            modelBuilder.Entity("HolidayOUnit", b =>
                {
                    b.HasOne("OpenHolidaysApi.DataLayer.Holiday", null)
                        .WithMany()
                        .HasForeignKey("HolidaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenHolidaysApi.DataLayer.OUnit", null)
                        .WithMany()
                        .HasForeignKey("OUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HolidaySubdivision", b =>
                {
                    b.HasOne("OpenHolidaysApi.DataLayer.Holiday", null)
                        .WithMany()
                        .HasForeignKey("HolidaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenHolidaysApi.DataLayer.Subdivision", null)
                        .WithMany()
                        .HasForeignKey("SubdivisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Holiday", b =>
                {
                    b.HasOne("OpenHolidaysApi.DataLayer.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.OUnit", b =>
                {
                    b.HasOne("OpenHolidaysApi.DataLayer.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenHolidaysApi.DataLayer.OUnit", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Country");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Subdivision", b =>
                {
                    b.HasOne("OpenHolidaysApi.DataLayer.Country", "Country")
                        .WithMany("Subdivisions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenHolidaysApi.DataLayer.Subdivision", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Country");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OUnitSubdivision", b =>
                {
                    b.HasOne("OpenHolidaysApi.DataLayer.OUnit", null)
                        .WithMany()
                        .HasForeignKey("OUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenHolidaysApi.DataLayer.Subdivision", null)
                        .WithMany()
                        .HasForeignKey("SubdivisionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.Country", b =>
                {
                    b.Navigation("Subdivisions");
                });

            modelBuilder.Entity("OpenHolidaysApi.DataLayer.OUnit", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
